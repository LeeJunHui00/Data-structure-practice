#include <iostream>
using namespace std;

class queue3 {
public:
	queue3() {
		rear = 0;
	}
	bool IsEmpty() { return (rear == 0); };
	bool IsFull() { return (rear == 3); };
	bool InsertQ(int el) {
		if (rear == 3) return false;
		arr[rear++] = el;
		return true;
	}
	int DeleteQ() {
		if (rear == 0) return -1;
		int el = arr[0];
		rear--;
		for (int i = 0; i < rear; i++) arr[i] = arr[i + 1];
		return el;
	}
private:
	int arr[3];
	int rear;
};

class queue6 {
public:
	queue6();
	bool IsEmpty();
	bool IsFull();
	bool InsertQ(int el);
	int DeleteQ();
private:
	queue3 q1;
	queue3* q2;
};

queue6::queue6() {
	q2 = new queue3();
}

bool
queue6::InsertQ(int el) {
	if (IsFull()) {						//q1이 가득 찼을 경우
		q2->InsertQ(el);
		return true;
	}
	q1.InsertQ(el);						//q1에 자리가 있을 경우
	return true;
}

int
queue6::DeleteQ() {
	if (IsEmpty()) {
		return q2->DeleteQ();
	}
	return q1.DeleteQ();
}

bool
queue6::IsEmpty() {
	return q1.IsEmpty();				//q1에 자리가 있으면 return 0, 가득 찼으면 return 1
}

bool
queue6::IsFull() {
	return q1.IsFull();				//q1에 자리가 있으면 return 1, 가득 찼으면 return 0
}

int main() {
	int n, i, a;
	queue6* q = new queue6();

	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> a;
		if (a == 0) cout << q->DeleteQ() << " ";
		else q->InsertQ(a);
	}
	return 0;
};
